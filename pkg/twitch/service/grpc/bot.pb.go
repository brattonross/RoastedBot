// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bot.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	bot.proto

It has these top-level messages:
	Command
	Module
	ModulesRequest
	ModulesResponse
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Command struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Enabled  bool   `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	Cooldown string `protobuf:"bytes,3,opt,name=cooldown" json:"cooldown,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Command) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Command) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Command) GetCooldown() string {
	if m != nil {
		return m.Cooldown
	}
	return ""
}

type Module struct {
	Name     string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Enabled  bool       `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	Commands []*Command `protobuf:"bytes,3,rep,name=commands" json:"commands,omitempty"`
}

func (m *Module) Reset()                    { *m = Module{} }
func (m *Module) String() string            { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()               {}
func (*Module) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Module) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Module) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Module) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

type ModulesRequest struct {
}

func (m *ModulesRequest) Reset()                    { *m = ModulesRequest{} }
func (m *ModulesRequest) String() string            { return proto.CompactTextString(m) }
func (*ModulesRequest) ProtoMessage()               {}
func (*ModulesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ModulesResponse struct {
	Modules map[string]*Module `protobuf:"bytes,1,rep,name=modules" json:"modules,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ModulesResponse) Reset()                    { *m = ModulesResponse{} }
func (m *ModulesResponse) String() string            { return proto.CompactTextString(m) }
func (*ModulesResponse) ProtoMessage()               {}
func (*ModulesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ModulesResponse) GetModules() map[string]*Module {
	if m != nil {
		return m.Modules
	}
	return nil
}

func init() {
	proto.RegisterType((*Command)(nil), "grpc.Command")
	proto.RegisterType((*Module)(nil), "grpc.Module")
	proto.RegisterType((*ModulesRequest)(nil), "grpc.ModulesRequest")
	proto.RegisterType((*ModulesResponse)(nil), "grpc.ModulesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for BotService service

type BotServiceClient interface {
	Modules(ctx context.Context, in *ModulesRequest, opts ...grpc1.CallOption) (*ModulesResponse, error)
}

type botServiceClient struct {
	cc *grpc1.ClientConn
}

func NewBotServiceClient(cc *grpc1.ClientConn) BotServiceClient {
	return &botServiceClient{cc}
}

func (c *botServiceClient) Modules(ctx context.Context, in *ModulesRequest, opts ...grpc1.CallOption) (*ModulesResponse, error) {
	out := new(ModulesResponse)
	err := grpc1.Invoke(ctx, "/grpc.BotService/Modules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BotService service

type BotServiceServer interface {
	Modules(context.Context, *ModulesRequest) (*ModulesResponse, error)
}

func RegisterBotServiceServer(s *grpc1.Server, srv BotServiceServer) {
	s.RegisterService(&_BotService_serviceDesc, srv)
}

func _BotService_Modules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).Modules(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.BotService/Modules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).Modules(ctx, req.(*ModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BotService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.BotService",
	HandlerType: (*BotServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Modules",
			Handler:    _BotService_Modules_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "bot.proto",
}

func init() { proto.RegisterFile("bot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4b, 0x4b, 0xfb, 0x40,
	0x14, 0xc5, 0x99, 0xa6, 0xff, 0xa6, 0xbd, 0xed, 0x5f, 0xcb, 0x45, 0x61, 0xc8, 0x2a, 0xcc, 0x2a,
	0x6e, 0xb2, 0x88, 0x20, 0x22, 0xae, 0x7c, 0x80, 0x1b, 0x37, 0xd3, 0x4f, 0x90, 0xc7, 0x45, 0xc4,
	0x64, 0x6e, 0xcc, 0xa3, 0xd2, 0x8f, 0xe2, 0xb7, 0x95, 0x4c, 0x1e, 0x94, 0xe2, 0xc6, 0xdd, 0x3d,
	0xf7, 0xe4, 0xfe, 0x72, 0x0e, 0x03, 0xab, 0x84, 0x9b, 0xb0, 0xac, 0xb8, 0x61, 0x9c, 0xbf, 0x55,
	0x65, 0xaa, 0x76, 0xe0, 0x3e, 0x72, 0x51, 0xc4, 0x26, 0x43, 0x84, 0xb9, 0x89, 0x0b, 0x92, 0xc2,
	0x17, 0xc1, 0x4a, 0xdb, 0x19, 0x25, 0xb8, 0x64, 0xe2, 0x24, 0xa7, 0x4c, 0xce, 0x7c, 0x11, 0x2c,
	0xf5, 0x28, 0xd1, 0x83, 0x65, 0xca, 0x9c, 0x67, 0xfc, 0x65, 0xa4, 0x63, 0x2f, 0x26, 0xad, 0x62,
	0x58, 0xbc, 0x72, 0xd6, 0xe6, 0xf4, 0x47, 0xe6, 0x55, 0xc7, 0xb4, 0x61, 0x6a, 0xe9, 0xf8, 0x4e,
	0xb0, 0x8e, 0xfe, 0x87, 0x5d, 0xca, 0x70, 0x88, 0xa8, 0x27, 0x5b, 0x6d, 0xe1, 0xac, 0xff, 0x45,
	0xad, 0xe9, 0xb3, 0xa5, 0xba, 0x51, 0xdf, 0x02, 0xce, 0xa7, 0x55, 0x5d, 0xb2, 0xa9, 0x09, 0xef,
	0xc1, 0x2d, 0xfa, 0x95, 0x14, 0x96, 0xa7, 0x7a, 0xde, 0xc9, 0x77, 0xa3, 0x7e, 0x36, 0x4d, 0x75,
	0xd0, 0xe3, 0x89, 0xf7, 0x02, 0x9b, 0x63, 0x03, 0xb7, 0xe0, 0x7c, 0xd0, 0x61, 0xe8, 0xd2, 0x8d,
	0xa8, 0xe0, 0xdf, 0x3e, 0xce, 0x5b, 0xb2, 0x45, 0xd6, 0xd1, 0xe6, 0x98, 0xae, 0x7b, 0xeb, 0x6e,
	0x76, 0x2b, 0xa2, 0x27, 0x80, 0x07, 0x6e, 0x76, 0x54, 0xed, 0xdf, 0x53, 0xc2, 0x1b, 0x70, 0x07,
	0x2e, 0x5e, 0x9c, 0xe4, 0xb1, 0x55, 0xbc, 0xcb, 0x5f, 0x53, 0x26, 0x0b, 0xfb, 0x70, 0xd7, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x65, 0xa1, 0x8e, 0xc5, 0x01, 0x00, 0x00,
}
